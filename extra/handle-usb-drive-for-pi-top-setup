#!/bin/bash
###############################################################
#                Unofficial 'Bash strict mode'                #
# http://redsymbol.net/articles/unofficial-bash-strict-mode/  #
###############################################################
set -euo pipefail
IFS=$'\n\t'
###############################################################

log() {
    if [ "$#" -gt 0 ]; then
        msg="$1"
    else
        # Support reading from stdin
        read msg
    fi
    logger -t pt-usb-setup "[$DEVICE | $OPERATION] $msg"
}

is_mounted() {
    return $(mount | grep -qs "${DEVICE}")
}

get_mount_point() {
    if is_mounted "${DEVICE_NAME}"; then
        echo $(mount | grep -s "${DEVICE}" | awk '{print $3}')
    else
        echo "/tmp/${DEVICE_NAME}"
    fi
}

mount_device() {
    if is_mounted "${DEVICE_NAME}"; then
        log "Device ${DEVICE} is already mounted in ${MOUNT_POINT}, skipping mount"
        return
    fi

    MOUNT_DST=${1:-}
    if [ -z "${MOUNT_DST}" ]; then
        log "No mount destination provided, exiting..."
        exit 1
    fi

    log "Mounting ${DEVICE} into ${MOUNT_DST}"
    mkdir -p "${MOUNT_DST}"
    mount -t "${FS}" "${DEVICE}" "${MOUNT_DST}"
    log "$(ls -l "${MOUNT_DST}")"
}

umount_device() {
    if is_mounted "${DEVICE_NAME}"; then
        log "Unmounting ${MOUNT_POINT}..."
        umount "${MOUNT_POINT}"
    else
        log "Device ${DEVICE} is not mounted, skipping unmount"
    fi
}

start_miniscreen_app() {
    log "Starting miniscreen application..."
    ESCAPED_MOUNT_POINT_ARG=$(systemd-escape -- $MOUNT_POINT)
    systemctl start pt-usb-setup@"$ESCAPED_MOUNT_POINT_ARG".service
}

has_pitop_offline_setup_files() {
    if [ -f "${MOUNT_POINT}/pi-top-usb-setup.tar.gz" ] || [ -f "${MOUNT_POINT}/pi-top-usb-setup/updates.tar.gz" ] || [ -d "${MOUNT_POINT}/pi-top-usb-setup/updates" ]; then
        return 0
    fi
    return 1
}

handle_add() {
    mount_device "${MOUNT_POINT}"

    if has_pitop_offline_setup_files; then
        start_miniscreen_app
    else
        log "Nothing to do with device ${DEVICE}; exiting ..."
    fi
}


udisks2_service_is_active() {
  UDISKS_SERVICE_STATE=$(systemctl show -p ActiveState --value udisks2)
  if [ "${UDISKS_SERVICE_STATE}" = "active" ]; then
    return 0
  else
    return 1
  fi
}

OPERATION="${1:-}"
DEVICE="${2:-}"
FS="${3:-}"

DEVICE_NAME=$(basename "${DEVICE}")
MOUNT_POINT=$(get_mount_point)

log "$OPERATION device $DEVICE with filesystem $FS"

if [ "${OPERATION}" = "add" ]; then
    if udisks2_service_is_active; then
      log "'udisks2' service will handle device $DEVICE mount; exiting and waiting for 'change' rule"
    else
      handle_add
    fi
elif [ "${OPERATION}" = "change" ]; then
    handle_add
elif [ "${OPERATION}" = "removed" ]; then
    if udisks2_service_is_active; then
      log "'udisks2' service will handle device $DEVICE umount; exiting"
    else
      umount_device
    fi
else
    log "Operation ${OPERATION} not supported, exiting..."
fi
